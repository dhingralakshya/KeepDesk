openapi: 3.0.0
info:
  title: KeepDesk API
  version: 1.0.0
  description: OpenAPI specification for the KeepDesk Notes Management Web Application
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
                phone: { type: number }
              required: [name, email, password, phone]
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '500':
          description: Registration failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  error: { type: string }
  /login:
    post:
      summary: Login user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
              required: [email, password]
      responses:
        '200':
          description: Login successful, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
        '401':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '403':
          description: Invalid password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '500':
          description: Login error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  error: { type: string }
  /user/{id}:
    get:
      summary: Get user details by ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User found, returns name
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: { type: string }
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  error: { type: string }
  /:
    get:
      summary: Get all notes of the logged-in user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '500':
          description: Error fetching notes
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  error: { type: string }
    post:
      summary: Create a new note
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                content: { type: string }
              required: [title, content]
      responses:
        '201':
          description: Note created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '500':
          description: Error saving note
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  error: { type: string }
  /update/{id}:
    patch:
      summary: Update a specific note by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                content: { type: string }
      responses:
        '200':
          description: Note updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '404':
          description: Note not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '500':
          description: Error updating note
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  error: { type: string }
  /delete:
    post:
      summary: Delete a note by ID (in request body)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: string }
              required: [id]
      responses:
        '200':
          description: Note deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '404':
          description: Note not found or not owned by user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '500':
          description: Error deleting note
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  error: { type: string }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Note:
      type: object
      properties:
        _id: { type: string }
        title: { type: string }
        content: { type: string }
        user: { type: string }
